各种协议，可以根据吞吐量来大致分为两类：
        1.交互数据类：telnet， ssh：多数情况下只是做小流量的数据交换
        2.成块数据类：ftp：要求TCP能尽量的运载数据，把数据的吞吐量做到最大，并尽可能的提高效率
        针对这两种情况，TCP给出了两种不同的策略来进行数据传输

TCP_NODELAY和TCP_CORK选项

交互数据流
        
        交互式输入：
                对于交互式服务，一个数据包分组会牵扯出四次交互：
                1. client 发送数据给 server
                2. server 对client发送的数据予以ACK确认
                3. server 对clinet发出响应数据
                4. client 对server的响应数据予以确认
        
        若client每次发送一个字节，则包含该字节的包大小为20+20+1=41字节，在局域网一般不会出现问题，但是在广域网上可能会引起拥塞



        ACK延时确认（针对接收方发送除去的ACK）：
                目的：减少网络上ack报文的数量
                原理：
                        到接收方收到数据后，TCP会延迟ACK的发送，希望应用程序会对刚刚收到的数据进行应答，这样就可以用新数据将ACK捎带过去（2,3步合并）
                        200ms到后，若该方向没有其他数据要发出，那就单纯发送一个ACK确认（该ack也被称为经受延迟的确认）
                参数：
                        sk.setsockopt  :  TCP_QUICKACK      # 布尔值，1表示立即发送ack；非永久性，每次recv后都需要设置
                        
        Nagle算法(发送方)：
                目的：减少网络上的小数据包（不足MSS大小）数量
                原理：
                        如果包长度达到MSS，则允许发送；
                        如果该包含有FIN，则允许发送；
                        设置了TCP_NODELAY选项，则允许发送；
                        未设置TCP_CORK选项时（默认socket 均未设置），若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送 // 即同一时刻链路中只能有一个小数据包没有被确认

                        上述条件都未满足，但发生了超时（一般为200ms），则立即发送
                参数：
                        图形式交互，鼠标点等击事件必须无时延地发送，以便为进行某种操作的交互用户提供实时的反馈，这些场景需要关闭
                        CP_NODELAY：无论数据包是多么的小，都立即发送（不考虑拥塞窗口）。
                         TCP_CORK：TCP链接不会发送任何的小包，即只有当数据量达到MSS时，才会被发送
                
                

            
        
        
        
                        
                        
系统如何区分交互与非交互数据流？
        
        
        
        
        
        
        
成块数据流：

        
        1. rwnd 滑动窗口（接收方流量控制）：
               窗口合拢：发送出去的数据被确认时，左边窗口向右移动，
               窗口张开：服务端进程读取了已经被确认的数据，并释放了TCP的接收缓存，右边窗口向右移动
               窗口收缩：不建议，但是RFC规定必须有一端能处理这种情况
               
               初始值：最大为20MSS，通过rwnd调整
               传输过程最优值：BDP = 100Mbps * 100ms = (100 / 8) * (100 / 1000) = 1.25MB
               注意：
                        发送端不必发送一个全窗口大小的数据
                        允许socket设置发送和接收缓存的大小（表示该连接上所能够通告的最大窗口大小）
                        
                        
      
        2. cwnd 拥塞窗口/慢启动（发送方流量控制）：
                
                 初始值：cwnd = min(4 * MSS, max(2 * MSS, 4380))，通过cwnd调整
                 最优值：
                若在局域网中， 发送方一开始便向网络发送多个报文段，直至达到接收方通告的窗口大小为止，这种方式可以；
                但是广域网中，发送方和接收方之间存在多个路由器和速率较慢的链路时，一些中间路由器必须缓存分组，并有可能耗尽存储器的空间，从而降低吞吐量
                
                1.当与另一个网络的主机建立TCP连接时，拥塞窗口被初始化为1个报文段（即另一端通告的报文段大小）
                2.发送方开始发送一个报文，然后等待ACK
                3.当收到该ACK时，拥塞窗口从1增加到2，即可以发送2个报文段
                4.发送方再发送2个报文段，然后等待ACK，当收到这两个报文段的ACK时，拥塞窗口就增加为4；这是一种指数增加的关系
                
                在某些点上可能达到了互联网的容量，于是中间路由器开始丢弃分组，这就通知发送方它的拥塞窗口开得过大
                慢启动算法用于保证新分组进入网络的速率与另一端返回确定的速率相等
             
                
               
                
                
        3. 拥塞避免：
          
                ssthresh : 
                        主要限制了发送窗口的增长速率
                        1.  cwnd < ssthresh： 发送方按照慢启动方法，发送窗口呈指数式增长
                        2. cwnd > ssthresh ：当发送窗口达到设置的ssthresh值时，每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍
                        3. cwnd = ssthresh ：既可使用慢启动算法，也可使用拥塞控制避免算法
                        4. 若发送方判断出网络拥塞（根据是否有报文没有收到ACK），则把ssthresh设置为当前窗口大小的一半，并讲cwnd设置为初始值，重新执行慢启动

                  调整：/proc/sys/net/ipv4/tcp_max_ssthresh

        总结：
                 传输过程中实际窗口大小 = min（rwnd，cwnd）
                 调整初始化窗口大小：
                        ip route change default via <gateway> dev <eth0> initcwnd <value1> ssthresh <value2>
                        ip route show
        
                        
                        
                        
                        
                        
                        
https://blog.csdn.net/lishanmin11/article/category/7095319   # 数据收发详细过程      
                        
                        
                        
                        
                        
           
/proc/sys/net/ipv4/tcp_abc

tcp_frto_response

最大数据帧：
        Ethernet   = 14字节帧头 + 1500字节MTU     + 4字节校验和
        TCP  = 20字节IP头 + 20字节IP头 + 12字节时间 + MSS
        
                 
        
        
        
        
        
        
    

    
    
    
    
    



	
	



            


